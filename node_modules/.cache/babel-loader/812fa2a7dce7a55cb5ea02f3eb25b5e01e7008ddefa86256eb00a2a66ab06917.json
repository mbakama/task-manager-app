{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PrimeReact, { PrimeReactContext } from 'primereact/api';\nimport { ComponentBase, useHandleStyle } from 'primereact/componentbase';\nimport { CSSTransition } from 'primereact/csstransition';\nimport { useOverlayListener, useMountEffect, useUnmountEffect as useUnmountEffect$1 } from 'primereact/hooks';\nimport { OverlayService } from 'primereact/overlayservice';\nimport { Portal } from 'primereact/portal';\nimport { classNames, DomHandler, ObjectUtils, UniqueComponentId, ZIndexUtils, mergeProps, IconUtils } from 'primereact/utils';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nvar styles = \"\\n@layer primereact {\\n    .p-menu-overlay {\\n        position: absolute;\\n        /* Github #3122: Prevent animation flickering  */\\n        top: -9999px;\\n        left: -9999px;\\n    }\\n    \\n    .p-menu ul {\\n        margin: 0;\\n        padding: 0;\\n        list-style: none;\\n    }\\n    \\n    .p-menu .p-menuitem-link {\\n        cursor: pointer;\\n        display: flex;\\n        align-items: center;\\n        text-decoration: none;\\n        overflow: hidden;\\n        position: relative;\\n    }\\n    \\n    .p-menu .p-menuitem-text {\\n        line-height: 1;\\n    }\\n}\\n\";\nvar classes = {\n  root: function root(_ref) {\n    var props = _ref.props,\n      context = _ref.context;\n    return classNames('p-menu p-component', {\n      'p-menu-overlay': props.popup,\n      'p-input-filled': context && context.inputStyle === 'filled' || PrimeReact.inputStyle === 'filled',\n      'p-ripple-disabled': context && context.ripple === false || PrimeReact.ripple === false\n    });\n  },\n  menu: 'p-menu-list p-reset',\n  action: function action(_ref2) {\n    var item = _ref2.item;\n    return classNames('p-menuitem-link', {\n      'p-disabled': item.disabled\n    });\n  },\n  menuitem: 'p-menuitem',\n  submenuHeader: function submenuHeader(_ref3) {\n    var submenu = _ref3.submenu;\n    return classNames('p-submenu-header', {\n      'p-disabled': submenu.disabled\n    });\n  },\n  separator: 'p-menu-separator',\n  label: 'p-menuitem-text',\n  icon: 'p-menuitem-icon',\n  transition: 'p-connected-overlay'\n};\nvar inlineStyles = {\n  submenuHeader: function submenuHeader(_ref4) {\n    var submenu = _ref4.submenu;\n    return submenu.style;\n  },\n  menuitem: function menuitem(_ref5) {\n    var item = _ref5.item;\n    return item.style;\n  }\n};\nvar MenuBase = ComponentBase.extend({\n  defaultProps: {\n    __TYPE: 'Menu',\n    id: null,\n    model: null,\n    popup: false,\n    popupAlignment: 'left',\n    style: null,\n    className: null,\n    autoZIndex: true,\n    baseZIndex: 0,\n    appendTo: null,\n    transitionOptions: null,\n    onShow: null,\n    onHide: null,\n    children: undefined,\n    closeOnEscape: true\n  },\n  css: {\n    classes: classes,\n    styles: styles,\n    inlineStyles: inlineStyles\n  }\n});\nvar usePrevious = function usePrevious(newValue) {\n  var ref = React.useRef(undefined);\n  React.useEffect(function () {\n    ref.current = newValue;\n  });\n  return ref.current;\n};\n\n/* eslint-disable */\nvar useUnmountEffect = function useUnmountEffect(fn) {\n  return React.useEffect(function () {\n    return fn;\n  }, []);\n};\n/* eslint-enable */\n\n/* eslint-disable */\nvar useEventListener = function useEventListener(_ref) {\n  var _ref$target = _ref.target,\n    target = _ref$target === void 0 ? 'document' : _ref$target,\n    type = _ref.type,\n    listener = _ref.listener,\n    options = _ref.options,\n    _ref$when = _ref.when,\n    when = _ref$when === void 0 ? true : _ref$when;\n  var targetRef = React.useRef(null);\n  var listenerRef = React.useRef(null);\n  var prevOptions = usePrevious(options);\n  var bind = function bind() {\n    var bindOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (ObjectUtils.isNotEmpty(bindOptions.target)) {\n      unbind();\n      (bindOptions.when || when) && (targetRef.current = DomHandler.getTargetElement(bindOptions.target));\n    }\n    if (!listenerRef.current && targetRef.current) {\n      listenerRef.current = function (event) {\n        return listener && listener(event);\n      };\n      targetRef.current.addEventListener(type, listenerRef.current, options);\n    }\n  };\n  var unbind = function unbind() {\n    if (listenerRef.current) {\n      targetRef.current.removeEventListener(type, listenerRef.current, options);\n      listenerRef.current = null;\n    }\n  };\n  React.useEffect(function () {\n    if (when) {\n      targetRef.current = DomHandler.getTargetElement(target);\n    } else {\n      unbind();\n      targetRef.current = null;\n    }\n  }, [target, when]);\n  React.useEffect(function () {\n    if (listenerRef.current && (listenerRef.current !== listener || prevOptions !== options)) {\n      unbind();\n      when && bind();\n    }\n  }, [listener, options]);\n  useUnmountEffect(function () {\n    unbind();\n  });\n  return [bind, unbind];\n};\n/* eslint-enable */\n\nvar useOnEscapeKey = function useOnEscapeKey(ref, condition, callback) {\n  var handleEsc = function handleEsc(event) {\n    if (event.key === 'Esc' || event.key === 'Escape') {\n      event.stopImmediatePropagation();\n      callback(event);\n    }\n    return;\n  };\n  var _useEventListener = useEventListener({\n      type: 'keydown',\n      listener: handleEsc\n    }),\n    _useEventListener2 = _slicedToArray(_useEventListener, 2),\n    bindKeyDownListener = _useEventListener2[0],\n    unbindKeyDownListener = _useEventListener2[1];\n  React.useEffect(function () {\n    if (!condition) {\n      return;\n    }\n    if (!ref.current) {\n      return;\n    }\n    bindKeyDownListener();\n    return function () {\n      unbindKeyDownListener();\n    };\n  });\n  return [ref, callback];\n};\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nvar Menu = /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef(function (inProps, ref) {\n  var context = React.useContext(PrimeReactContext);\n  var props = MenuBase.getProps(inProps, context);\n  var _React$useState = React.useState(props.id),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    idState = _React$useState2[0],\n    setIdState = _React$useState2[1];\n  var _React$useState3 = React.useState(!props.popup),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    visibleState = _React$useState4[0],\n    setVisibleState = _React$useState4[1];\n  var _MenuBase$setMetaData = MenuBase.setMetaData({\n      props: props,\n      state: {\n        id: idState,\n        visible: visibleState\n      }\n    }),\n    ptm = _MenuBase$setMetaData.ptm,\n    cx = _MenuBase$setMetaData.cx,\n    sx = _MenuBase$setMetaData.sx,\n    isUnstyled = _MenuBase$setMetaData.isUnstyled;\n  useHandleStyle(MenuBase.css.styles, isUnstyled, {\n    name: 'menu'\n  });\n  var menuRef = React.useRef(null);\n  var targetRef = React.useRef(null);\n  useOnEscapeKey(targetRef, props.popup && props.closeOnEscape, function (event) {\n    hide(event);\n  });\n  var _useOverlayListener = useOverlayListener({\n      target: targetRef,\n      overlay: menuRef,\n      listener: function listener(event, _ref) {\n        var valid = _ref.valid;\n        valid && hide(event);\n      },\n      when: visibleState\n    }),\n    _useOverlayListener2 = _slicedToArray(_useOverlayListener, 2),\n    bindOverlayListener = _useOverlayListener2[0],\n    unbindOverlayListener = _useOverlayListener2[1];\n  var onPanelClick = function onPanelClick(event) {\n    if (props.popup) {\n      OverlayService.emit('overlay-click', {\n        originalEvent: event,\n        target: targetRef.current\n      });\n    }\n  };\n  var onItemClick = function onItemClick(event, item) {\n    if (item.disabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!item.url) {\n      event.preventDefault();\n    }\n    if (item.command) {\n      item.command({\n        originalEvent: event,\n        item: item\n      });\n    }\n    if (props.popup) {\n      hide(event);\n    }\n  };\n  var onItemKeyDown = function onItemKeyDown(event, item) {\n    var listItem = event.currentTarget.parentElement;\n    switch (event.which) {\n      //down\n      case 40:\n        var nextItem = findNextItem(listItem);\n        nextItem && nextItem.children[0].focus();\n        event.preventDefault();\n        break;\n\n      //up\n      case 38:\n        var prevItem = findPrevItem(listItem);\n        prevItem && prevItem.children[0].focus();\n        event.preventDefault();\n        break;\n    }\n  };\n  var findNextItem = function findNextItem(item) {\n    var nextItem = item.nextElementSibling;\n    return nextItem ? DomHandler.getAttribute(nextItem, '[data-p-disabled=\"true\"]') || !DomHandler.getAttribute(nextItem, '[data-pc-section=\"menuitem\"]') ? findNextItem(nextItem) : nextItem : null;\n  };\n  var findPrevItem = function findPrevItem(item) {\n    var prevItem = item.previousElementSibling;\n    return prevItem ? DomHandler.getAttribute(prevItem, '[data-p-disabled=\"true\"]') || !DomHandler.getAttribute(prevItem, '[data-pc-section=\"menuitem\"]') ? findPrevItem(prevItem) : prevItem : null;\n  };\n  var toggle = function toggle(event) {\n    if (props.popup) {\n      visibleState ? hide(event) : show(event);\n    }\n  };\n  var show = function show(event) {\n    targetRef.current = event.currentTarget;\n    setVisibleState(true);\n    props.onShow && props.onShow(event);\n  };\n  var hide = function hide(event) {\n    targetRef.current = event.currentTarget;\n    setVisibleState(false);\n    props.onHide && props.onHide(event);\n  };\n  var onEnter = function onEnter() {\n    DomHandler.addStyles(menuRef.current, {\n      position: 'absolute',\n      top: '0',\n      left: '0'\n    });\n    ZIndexUtils.set('menu', menuRef.current, context && context.autoZIndex || PrimeReact.autoZIndex, props.baseZIndex || context && context.zIndex['menu'] || PrimeReact.zIndex['menu']);\n    DomHandler.absolutePosition(menuRef.current, targetRef.current, props.popupAlignment);\n  };\n  var onEntered = function onEntered() {\n    bindOverlayListener();\n  };\n  var onExit = function onExit() {\n    targetRef.current = null;\n    unbindOverlayListener();\n  };\n  var onExited = function onExited() {\n    ZIndexUtils.clear(menuRef.current);\n  };\n  useMountEffect(function () {\n    if (!idState) {\n      setIdState(UniqueComponentId());\n    }\n  });\n  useUnmountEffect$1(function () {\n    ZIndexUtils.clear(menuRef.current);\n  });\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      toggle: toggle,\n      show: show,\n      hide: hide,\n      getElement: function getElement() {\n        return menuRef.current;\n      },\n      getTarget: function getTarget() {\n        return targetRef.current;\n      }\n    };\n  });\n  var createSubmenu = function createSubmenu(submenu, index) {\n    var key = idState + '_sub_' + index;\n    var items = submenu.items.map(createMenuItem);\n    var submenuHeaderProps = mergeProps({\n      id: key,\n      key: key,\n      role: 'presentation',\n      className: classNames(submenu.className, cx('submenuHeader', {\n        submenu: submenu\n      })),\n      style: sx('submenuHeader', {\n        submenu: submenu\n      }),\n      'data-p-disabled': submenu.disabled\n    }, ptm('submenuHeader'));\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: key\n    }, /*#__PURE__*/React.createElement(\"li\", submenuHeaderProps, submenu.label), items);\n  };\n  var createSeparator = function createSeparator(index) {\n    var key = idState + '_separator_' + index;\n    var separatorProps = mergeProps({\n      id: key,\n      key: key,\n      className: cx('separator'),\n      role: 'separator'\n    }, ptm('separator'));\n    return /*#__PURE__*/React.createElement(\"li\", separatorProps);\n  };\n  var createMenuItem = function createMenuItem(item, index) {\n    if (item.visible === false) {\n      return null;\n    }\n    var linkClassName = classNames('p-menuitem-link', {\n      'p-disabled': item.disabled\n    });\n    var iconClassName = classNames('p-menuitem-icon', item.icon);\n    var iconProps = mergeProps({\n      className: cx('icon')\n    }, ptm('icon'));\n    var icon = IconUtils.getJSXIcon(item.icon, _objectSpread({}, iconProps), {\n      props: props\n    });\n    var labelProps = mergeProps({\n      className: cx('label')\n    }, ptm('label'));\n    var label = item.label && /*#__PURE__*/React.createElement(\"span\", labelProps, item.label);\n    var tabIndex = item.disabled ? null : 0;\n    var key = item.id || idState + '_' + index;\n    var actionProps = mergeProps({\n      href: item.url || '#',\n      className: cx('action', {\n        item: item\n      }),\n      role: 'menuitem',\n      target: item.target,\n      onClick: function onClick(event) {\n        return onItemClick(event, item);\n      },\n      onKeyDown: function onKeyDown(event) {\n        return onItemKeyDown(event);\n      },\n      tabIndex: tabIndex,\n      'aria-disabled': item.disabled,\n      'data-p-disabled': item.disabled\n    }, ptm('action'));\n    var content = /*#__PURE__*/React.createElement(\"a\", actionProps, icon, label);\n    if (item.template) {\n      var defaultContentOptions = {\n        onClick: function onClick(event) {\n          return onItemClick(event, item);\n        },\n        onKeyDown: function onKeyDown(event) {\n          return onItemKeyDown(event);\n        },\n        className: linkClassName,\n        tabIndex: tabIndex,\n        labelClassName: 'p-menuitem-text',\n        iconClassName: iconClassName,\n        element: content,\n        props: props\n      };\n      content = ObjectUtils.getJSXElement(item.template, item, defaultContentOptions);\n    }\n    var menuitemProps = mergeProps({\n      id: key,\n      key: key,\n      className: classNames(item.className, cx('menuitem')),\n      style: sx('menuitem', {\n        item: item\n      }),\n      role: 'none',\n      'data-p-disabled': item.disabled || false\n    }, ptm('menuitem'));\n    return /*#__PURE__*/React.createElement(\"li\", menuitemProps, content);\n  };\n  var createItem = function createItem(item, index) {\n    return item.separator ? createSeparator(index) : item.items ? createSubmenu(item, index) : createMenuItem(item, index);\n  };\n  var createMenu = function createMenu() {\n    return props.model.map(createItem);\n  };\n  var createElement = function createElement() {\n    if (props.model) {\n      var menuitems = createMenu();\n      var rootProps = mergeProps({\n        className: classNames(props.className, cx('root', {\n          context: context\n        })),\n        style: props.style,\n        onClick: function onClick(e) {\n          return onPanelClick(e);\n        }\n      }, MenuBase.getOtherProps(props), ptm('root'));\n      var menuProps = mergeProps({\n        className: cx('menu'),\n        role: 'menu'\n      }, ptm('menu'));\n      var transitionProps = mergeProps({\n        classNames: cx('transition'),\n        \"in\": visibleState,\n        timeout: {\n          enter: 120,\n          exit: 100\n        },\n        options: props.transitionOptions,\n        unmountOnExit: true,\n        onEnter: onEnter,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExited: onExited\n      }, ptm('transition'));\n      return /*#__PURE__*/React.createElement(CSSTransition, _extends({\n        nodeRef: menuRef\n      }, transitionProps), /*#__PURE__*/React.createElement(\"div\", _extends({\n        id: props.id,\n        ref: menuRef\n      }, rootProps), /*#__PURE__*/React.createElement(\"ul\", menuProps, menuitems)));\n    }\n    return null;\n  };\n  var element = createElement();\n  return props.popup ? /*#__PURE__*/React.createElement(Portal, {\n    element: element,\n    appendTo: props.appendTo\n  }) : element;\n}));\nMenu.displayName = 'Menu';\nexport { Menu };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}