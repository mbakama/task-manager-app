{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport PrimeReact, { PrimeReactContext } from 'primereact/api';\nimport { useMountEffect, useUpdateEffect, useUnmountEffect } from 'primereact/hooks';\nimport { ObjectUtils, DomHandler } from 'primereact/utils';\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nvar PortalBase = {\n  defaultProps: {\n    __TYPE: 'Portal',\n    element: null,\n    appendTo: null,\n    visible: false,\n    onMounted: null,\n    onUnmounted: null,\n    children: undefined\n  },\n  getProps: function getProps(props) {\n    return ObjectUtils.getMergedProps(props, PortalBase.defaultProps);\n  },\n  getOtherProps: function getOtherProps(props) {\n    return ObjectUtils.getDiffProps(props, PortalBase.defaultProps);\n  }\n};\nvar Portal = /*#__PURE__*/React.memo(function (inProps) {\n  var props = PortalBase.getProps(inProps);\n  var context = React.useContext(PrimeReactContext);\n  var _React$useState = React.useState(props.visible && DomHandler.isClient()),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    mountedState = _React$useState2[0],\n    setMountedState = _React$useState2[1];\n  useMountEffect(function () {\n    if (DomHandler.isClient() && !mountedState) {\n      setMountedState(true);\n      props.onMounted && props.onMounted();\n    }\n  });\n  useUpdateEffect(function () {\n    props.onMounted && props.onMounted();\n  }, [mountedState]);\n  useUnmountEffect(function () {\n    props.onUnmounted && props.onUnmounted();\n  });\n  var element = props.element || props.children;\n  if (element && mountedState) {\n    var appendTo = props.appendTo || context && context.appendTo || PrimeReact.appendTo || document.body;\n    return appendTo === 'self' ? element : /*#__PURE__*/ReactDOM.createPortal(element, appendTo);\n  }\n  return null;\n});\nPortal.displayName = 'Portal';\nexport { Portal };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}