{"ast":null,"code":"// Service de gestion des tâches\n// En mode démo, utilise le localStorage\n// En production, remplacer par Firebase\n\nclass TaskService {\n  constructor() {\n    this.storageKey = 'taskflow_tasks';\n    this.initializeDemoData();\n  }\n\n  // Initialiser avec des données de démonstration\n  initializeDemoData() {\n    const existingTasks = this.getTasks();\n    if (existingTasks.length === 0) {\n      const demoTasks = [{\n        id: '1',\n        title: 'Configurer Firebase',\n        description: 'Mettre en place la base de données Firebase pour la synchronisation en temps réel',\n        priority: 'high',\n        status: 'todo',\n        assignee: 'Hector Mbakama',\n        createdAt: new Date(Date.now() - 86400000).toISOString(),\n        // Hier\n        updatedAt: new Date(Date.now() - 86400000).toISOString()\n      }, {\n        id: '2',\n        title: 'Interface utilisateur',\n        description: 'Finaliser le design avec Material-UI et les animations',\n        priority: 'medium',\n        status: 'inProgress',\n        assignee: 'Hector Mbakama',\n        createdAt: new Date(Date.now() - 172800000).toISOString(),\n        // Il y a 2 jours\n        updatedAt: new Date(Date.now() - 3600000).toISOString() // Il y a 1 heure\n      }, {\n        id: '3',\n        title: 'Tests unitaires',\n        description: 'Écrire les tests pour les composants React',\n        priority: 'medium',\n        status: 'review',\n        assignee: 'Équipe QA',\n        createdAt: new Date(Date.now() - 259200000).toISOString(),\n        // Il y a 3 jours\n        updatedAt: new Date(Date.now() - 7200000).toISOString() // Il y a 2 heures\n      }, {\n        id: '4',\n        title: 'Documentation',\n        description: 'Rédiger la documentation utilisateur et technique',\n        priority: 'low',\n        status: 'done',\n        assignee: 'Hector Mbakama',\n        createdAt: new Date(Date.now() - 345600000).toISOString(),\n        // Il y a 4 jours\n        updatedAt: new Date(Date.now() - 86400000).toISOString() // Hier\n      }];\n      localStorage.setItem(this.storageKey, JSON.stringify(demoTasks));\n    }\n  }\n\n  // Récupérer toutes les tâches\n  getTasks() {\n    try {\n      const tasks = localStorage.getItem(this.storageKey);\n      return tasks ? JSON.parse(tasks) : [];\n    } catch (error) {\n      console.error('Erreur lors de la récupération des tâches:', error);\n      return [];\n    }\n  }\n\n  // Créer une nouvelle tâche\n  async createTask(task) {\n    return new Promise((resolve, reject) => {\n      try {\n        const tasks = this.getTasks();\n        tasks.push(task);\n        localStorage.setItem(this.storageKey, JSON.stringify(tasks));\n\n        // Simuler un délai réseau\n        setTimeout(() => {\n          resolve(task);\n        }, 300);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Mettre à jour une tâche\n  async updateTask(updatedTask) {\n    return new Promise((resolve, reject) => {\n      try {\n        const tasks = this.getTasks();\n        const index = tasks.findIndex(task => task.id === updatedTask.id);\n        if (index !== -1) {\n          tasks[index] = updatedTask;\n          localStorage.setItem(this.storageKey, JSON.stringify(tasks));\n\n          // Simuler un délai réseau\n          setTimeout(() => {\n            resolve(updatedTask);\n          }, 200);\n        } else {\n          reject(new Error('Tâche non trouvée'));\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Supprimer une tâche\n  async deleteTask(taskId) {\n    return new Promise((resolve, reject) => {\n      try {\n        const tasks = this.getTasks();\n        const filteredTasks = tasks.filter(task => task.id !== taskId);\n        localStorage.setItem(this.storageKey, JSON.stringify(filteredTasks));\n\n        // Simuler un délai réseau\n        setTimeout(() => {\n          resolve(taskId);\n        }, 200);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Récupérer les statistiques\n  getStats() {\n    const tasks = this.getTasks();\n    return {\n      total: tasks.length,\n      todo: tasks.filter(t => t.status === 'todo').length,\n      inProgress: tasks.filter(t => t.status === 'inProgress').length,\n      review: tasks.filter(t => t.status === 'review').length,\n      done: tasks.filter(t => t.status === 'done').length,\n      highPriority: tasks.filter(t => t.priority === 'high').length\n    };\n  }\n}\n\n// Configuration Firebase (pour la production)\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDDOZfLRWbWq45FuQ7NwIvj_2NeSAWLiPQ\",\n  authDomain: \"tast-a47ff.firebaseapp.com\",\n  projectId: \"tast-a47ff\",\n  storageBucket: \"tast-a47ff.firebasestorage.app\",\n  messagingSenderId: \"149849168981\",\n  appId: \"1:149849168981:web:822bec1556e5790c7e08dc\",\n  measurementId: \"G-D558VZ6N7T\"\n};\n\n// Exporter le service\nexport const taskService = new TaskService();\n\n// Fonction pour migrer vers Firebase (à implémenter)\nexport const migrateToFirebase = () => {\n  console.log('Migration vers Firebase à implémenter avec la configuration:', firebaseConfig);\n  // Ici, vous pourriez implémenter la logique de migration\n  // depuis localStorage vers Firebase Firestore\n};","map":{"version":3,"names":["TaskService","constructor","storageKey","initializeDemoData","existingTasks","getTasks","length","demoTasks","id","title","description","priority","status","assignee","createdAt","Date","now","toISOString","updatedAt","localStorage","setItem","JSON","stringify","tasks","getItem","parse","error","console","createTask","task","Promise","resolve","reject","push","setTimeout","updateTask","updatedTask","index","findIndex","Error","deleteTask","taskId","filteredTasks","filter","getStats","total","todo","t","inProgress","review","done","highPriority","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","taskService","migrateToFirebase","log"],"sources":["E:/portfolio/task-manager-app/src/services/taskService.js"],"sourcesContent":["// Service de gestion des tâches\r\n// En mode démo, utilise le localStorage\r\n// En production, remplacer par Firebase\r\n\r\nclass TaskService {\r\n  constructor() {\r\n    this.storageKey = 'taskflow_tasks';\r\n    this.initializeDemoData();\r\n  }\r\n\r\n  // Initialiser avec des données de démonstration\r\n  initializeDemoData() {\r\n    const existingTasks = this.getTasks();\r\n    if (existingTasks.length === 0) {\r\n      const demoTasks = [\r\n        {\r\n          id: '1',\r\n          title: 'Configurer Firebase',\r\n          description: 'Mettre en place la base de données Firebase pour la synchronisation en temps réel',\r\n          priority: 'high',\r\n          status: 'todo',\r\n          assignee: 'Hector Mbakama',\r\n          createdAt: new Date(Date.now() - 86400000).toISOString(), // Hier\r\n          updatedAt: new Date(Date.now() - 86400000).toISOString()\r\n        },\r\n        {\r\n          id: '2',\r\n          title: 'Interface utilisateur',\r\n          description: 'Finaliser le design avec Material-UI et les animations',\r\n          priority: 'medium',\r\n          status: 'inProgress',\r\n          assignee: 'Hector Mbakama',\r\n          createdAt: new Date(Date.now() - 172800000).toISOString(), // Il y a 2 jours\r\n          updatedAt: new Date(Date.now() - 3600000).toISOString() // Il y a 1 heure\r\n        },\r\n        {\r\n          id: '3',\r\n          title: 'Tests unitaires',\r\n          description: 'Écrire les tests pour les composants React',\r\n          priority: 'medium',\r\n          status: 'review',\r\n          assignee: 'Équipe QA',\r\n          createdAt: new Date(Date.now() - 259200000).toISOString(), // Il y a 3 jours\r\n          updatedAt: new Date(Date.now() - 7200000).toISOString() // Il y a 2 heures\r\n        },\r\n        {\r\n          id: '4',\r\n          title: 'Documentation',\r\n          description: 'Rédiger la documentation utilisateur et technique',\r\n          priority: 'low',\r\n          status: 'done',\r\n          assignee: 'Hector Mbakama',\r\n          createdAt: new Date(Date.now() - 345600000).toISOString(), // Il y a 4 jours\r\n          updatedAt: new Date(Date.now() - 86400000).toISOString() // Hier\r\n        }\r\n      ];\r\n\r\n      localStorage.setItem(this.storageKey, JSON.stringify(demoTasks));\r\n    }\r\n  }\r\n\r\n  // Récupérer toutes les tâches\r\n  getTasks() {\r\n    try {\r\n      const tasks = localStorage.getItem(this.storageKey);\r\n      return tasks ? JSON.parse(tasks) : [];\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des tâches:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Créer une nouvelle tâche\r\n  async createTask(task) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const tasks = this.getTasks();\r\n        tasks.push(task);\r\n        localStorage.setItem(this.storageKey, JSON.stringify(tasks));\r\n\r\n        // Simuler un délai réseau\r\n        setTimeout(() => {\r\n          resolve(task);\r\n        }, 300);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Mettre à jour une tâche\r\n  async updateTask(updatedTask) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const tasks = this.getTasks();\r\n        const index = tasks.findIndex(task => task.id === updatedTask.id);\r\n\r\n        if (index !== -1) {\r\n          tasks[index] = updatedTask;\r\n          localStorage.setItem(this.storageKey, JSON.stringify(tasks));\r\n\r\n          // Simuler un délai réseau\r\n          setTimeout(() => {\r\n            resolve(updatedTask);\r\n          }, 200);\r\n        } else {\r\n          reject(new Error('Tâche non trouvée'));\r\n        }\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Supprimer une tâche\r\n  async deleteTask(taskId) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const tasks = this.getTasks();\r\n        const filteredTasks = tasks.filter(task => task.id !== taskId);\r\n        localStorage.setItem(this.storageKey, JSON.stringify(filteredTasks));\r\n\r\n        // Simuler un délai réseau\r\n        setTimeout(() => {\r\n          resolve(taskId);\r\n        }, 200);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Récupérer les statistiques\r\n  getStats() {\r\n    const tasks = this.getTasks();\r\n    return {\r\n      total: tasks.length,\r\n      todo: tasks.filter(t => t.status === 'todo').length,\r\n      inProgress: tasks.filter(t => t.status === 'inProgress').length,\r\n      review: tasks.filter(t => t.status === 'review').length,\r\n      done: tasks.filter(t => t.status === 'done').length,\r\n      highPriority: tasks.filter(t => t.priority === 'high').length\r\n    };\r\n  }\r\n}\r\n\r\n// Configuration Firebase (pour la production)\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDDOZfLRWbWq45FuQ7NwIvj_2NeSAWLiPQ\",\r\n  authDomain: \"tast-a47ff.firebaseapp.com\",\r\n  projectId: \"tast-a47ff\",\r\n  storageBucket: \"tast-a47ff.firebasestorage.app\",\r\n  messagingSenderId: \"149849168981\",\r\n  appId: \"1:149849168981:web:822bec1556e5790c7e08dc\",\r\n  measurementId: \"G-D558VZ6N7T\"\r\n};\r\n\r\n// Exporter le service\r\nexport const taskService = new TaskService();\r\n\r\n// Fonction pour migrer vers Firebase (à implémenter)\r\nexport const migrateToFirebase = () => {\r\n  console.log('Migration vers Firebase à implémenter avec la configuration:', firebaseConfig);\r\n  // Ici, vous pourriez implémenter la logique de migration\r\n  // depuis localStorage vers Firebase Firestore\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}